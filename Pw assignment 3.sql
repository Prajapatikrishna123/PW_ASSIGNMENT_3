-- Q1. **Rank the customers based on the total amount they've spent on rentals.**
select c.customer_id , c.first_name , c.last_name ,
       sum(p.amount) as total_amount, 
       rank() over(order by sum(p.amount) desc) as rank1
from customer c 
      join payment p on
      c.customer_id = p.customer_id
group by c.customer_id , c.first_name , c.last_name 
order by total_amount desc; 

-- Q2. **Calculate the cumulative revenue generated by each film over time.**
SELECT
    f.film_id,
    f.title,
    p.payment_date,
    SUM(p.amount) AS daily_revenue,
    SUM(SUM(p.amount)) OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM
    payment p
JOIN
    rental r ON p.rental_id = r.rental_id
JOIN
    inventory i ON r.inventory_id = i.inventory_id
JOIN
    film f ON i.film_id = f.film_id
GROUP BY
    f.film_id, f.title, p.payment_date
ORDER BY
    f.film_id, p.payment_date;
    
-- Q3. **Determine the average rental duration for each film, considering films with similar lengths.**
select title , film_id , avg(rental_duration) over(partition by length) as avg_rental_duration
from film group by film_id;

-- Q4. **Identify the top 3 films in each category based on their rental counts.**
WITH FilmRentalCounts AS (
    SELECT
        f.film_id,
        f.title,
        c.name AS category,
        COUNT(r.rental_id) AS rental_count,
        ROW_NUMBER() OVER (PARTITION BY c.category_id ORDER BY COUNT(r.rental_id) DESC) AS rank1
    FROM
        rental r
    JOIN
        inventory i ON r.inventory_id = i.inventory_id
    JOIN
        film f ON i.film_id = f.film_id
    JOIN
        film_category fc ON f.film_id = fc.film_id
    JOIN
        category c ON fc.category_id = c.category_id
    GROUP BY
        f.film_id, f.title, c.category_id, c.name
)
SELECT
    film_id,
    title,
    category,
    rental_count
FROM
    FilmRentalCounts
WHERE
    rank1 <= 3
ORDER BY
    category, rank1;
    
-- Q5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals
-- across all customers.**
WITH CustomerRentalCounts AS (
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        COUNT(r.rental_id) AS total_rentals
    FROM
        customer c
    JOIN
        rental r ON c.customer_id = r.customer_id
    GROUP BY
        c.customer_id, c.first_name, c.last_name
),
AverageRentalCounts AS (
    SELECT
        AVG(total_rentals) AS avg_rentals
    FROM
        CustomerRentalCounts
)
SELECT
    crc.customer_id,
    crc.first_name,
    crc.last_name,
    crc.total_rentals,
    arc.avg_rentals,
    crc.total_rentals - arc.avg_rentals AS rental_difference
FROM
    CustomerRentalCounts crc,
    AverageRentalCounts arc
ORDER BY
    crc.customer_id;
    
-- Q6. **Find the monthly revenue trend for the entire rental store over time.**
SELECT 
    s.store_id,
    MONTH(r.rental_date) AS month_name,
    SUM(p.amount) AS revenue_trend
FROM
    rental r
        JOIN
    payment p ON p.rental_id = r.rental_id
        JOIN
    staff s1 ON s1.staff_id = p.staff_id
        JOIN
    store s ON s.store_id = s1.store_id
GROUP BY month_name , s.store_id
ORDER BY month_name;

-- Q7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
with customer_spend as 
(select customer_id, sum(amount) as total_rental_spend, 
rank() over(order by sum(amount) desc) as customer_rank from payment group by customer_id) 
select customer_id, total_rental_spend, customer_rank from customer_spend
where customer_rank < ((select count(*) from customer_spend)*20)/100; 

-- Q8. **Calculate the running total of rentals per category, ordered by rental count.**
WITH CategoryRentalCounts AS (
    SELECT
        c.category_id,
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM
        rental r
    JOIN
        inventory i ON r.inventory_id = i.inventory_id
    JOIN
        film f ON i.film_id = f.film_id
    JOIN
        film_category fc ON f.film_id = fc.film_id
    JOIN
        category c ON fc.category_id = c.category_id
    GROUP BY
        c.category_id, c.name
)
SELECT
    category_id,
    category_name,
    rental_count,
    SUM(rental_count) OVER (ORDER BY rental_count DESC) AS running_total_rentals
FROM
    CategoryRentalCounts
ORDER BY
    rental_count DESC;
    
-- Q9. **Find the films that have been rented less than the average rental count for their respective categories.**
with Category_count as (select f.title , fc.category_id, count(r.rental_id) as rental_count from film as f 
inner join film_category as fc on f.film_id = fc.film_id
inner join inventory as i on f.film_id = i.film_id
inner join rental as r on i.inventory_id = r.inventory_id group by fc.category_id, f.title),
film_count as (select title, category_id ,rental_count, avg(rental_count) over (partition by category_id) as avg_count from Category_count) 
select  title, category_id ,rental_count, avg_count from film_count where rental_count < avg_count; 

-- Q10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**
SELECT 
    MONTHNAME(payment_date) AS month_name,
    SUM(amount) AS highest_revenue
FROM
    payment
    GROUP BY month_name
ORDER BY SUM(amount) DESC
LIMIT 5;


